// server/src/game/Square.js
const { SQUARE_TYPES } = require('./enums'); // Gi·∫£ s·ª≠ c√≥ file enums

class Square {
  constructor({
    id, name, type, purchasePrice = 0, baseRent = 0, rentByBuildingLevel = [],
    historicalPeriod = null, canBePurchased = false, canBuildHere = false,
    buildingCost = {}, // VD: { NHA: 5000, DEN: 8000 }
    visualAsset = null, isRiver = false, taxAmount = 0
  }) {
    this.id = id;
    this.name = name;
    this.type = type; // PROPERTY_LAND, EVENT_CHANCE, TAX_PAYMENT, etc.
    this.ownerId = null;
    this.buildings = []; // M·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng Building, ho·∫∑c s·ªë l∆∞·ª£ng { NHA: 2, DEN: 1 }
    this.purchasePrice = purchasePrice;
    this.baseRent = baseRent; // Ti·ªÅn thu√™ ƒë·∫•t tr·ªëng
    this.rentByBuildingLevel = rentByBuildingLevel; // M·∫£ng ti·ªÅn thu√™ theo s·ªë nh√†/c·∫•p c√¥ng tr√¨nh
    this.currentTaxAmount = 0; // C√≥ th·ªÉ thay ƒë·ªïi b·ªüi L·ªÖ H·ªôi, ƒê·ªôc Quy·ªÅn
    this.historicalPeriod = historicalPeriod;
    this.canBePurchased = canBePurchased;
    this.canBuildHere = canBuildHere;
    this.visualAsset = visualAsset; // Tham chi·∫øu h√¨nh ·∫£nh/sprite

    this.buildingCost = buildingCost; // Chi ph√≠ x√¢y t·ª´ng lo·∫°i nh√† ban ƒë·∫ßu
    this.isMortgaged = false;
    this.isRiver = isRiver;
    this.taxAmount = taxAmount;
    this.cannotBeAcquired = false; // ƒê√°nh d·∫•u √¥ kh√¥ng th·ªÉ b·ªã mua l·∫°i sau khi n√¢ng c·∫•p
  }

  calculateCurrentRent(visitingPlayer, gameManager) {
    if (!this.isOwned() || this.ownerId === visitingPlayer.id || this.isMortgaged) {
      return 0;
    }

    let rent = this.baseRent;
    // Logic t√≠nh ti·ªÅn thu√™ d·ª±a tr√™n s·ªë l∆∞·ª£ng/lo·∫°i c√¥ng tr√¨nh
    // V√≠ d·ª• ƒë∆°n gi·∫£n: ƒë·∫øm s·ªë nh√† (type 'NHA')
    const housesCount = this.buildings.filter(b => b.type === 'NHA').length; // Gi·∫£ s·ª≠ building l√† m·∫£ng object
    if (housesCount > 0 && housesCount <= this.rentByBuildingLevel.length) {
      rent = this.rentByBuildingLevel[housesCount - 1];
    }
    // TODO: X·ª≠ l√Ω ƒë·ªôc quy·ªÅn (tƒÉng g·∫•p ƒë√¥i ti·ªÅn thu√™ ƒë·∫•t tr·ªëng)
    // const owner = gameManager.getPlayerById(this.ownerId);
    // if (owner && owner.hasMonopoly(this.historicalPeriod)) { rent *= 2; }

    // TODO: X·ª≠ l√Ω L·ªÖ H·ªôi (tƒÉng thu·∫ø/thu√™)
    if (this.currentTaxAmount > this.baseRent) { // D·∫•u hi·ªáu c√≥ L·ªÖ H·ªôi
        rent = this.currentTaxAmount;
    }

    return rent;
  }

  isOwned() {
    return this.ownerId !== null;
  }

  setOwner(playerId) {
    this.ownerId = playerId;
  }

  addBuilding(buildingType, playerId, gameManager) {
    if (this.ownerId !== playerId || !this.canBuildHere) {
      return false;
    }

    const { BUILDING_TYPES } = require('./enums');
    const player = gameManager.getPlayerById(playerId);

    // Ki·ªÉm tra s·ªë l∆∞·ª£ng c√¥ng tr√¨nh hi·ªán t·∫°i
    const existingBuildingsOfType = this.buildings.filter(b => b.type === buildingType).length;

    // Logic n√¢ng c·∫•p: 3 c√¥ng tr√¨nh c√πng lo·∫°i ‚Üí n√¢ng c·∫•p
    if (existingBuildingsOfType >= gameManager.gameSettings.buildingUpgradeThreshold) {
      return this.upgradeBuilding(buildingType, playerId, gameManager);
    }

    const cost = this.buildingCost[buildingType];
    if (!cost) {
        gameManager.emitGameLogToPlayer(playerId, `Lo·∫°i c√¥ng tr√¨nh ${buildingType} kh√¥ng x√°c ƒë·ªãnh chi ph√≠.`);
        return false;
    }

    if (player.canAfford(cost)) {
      player.subtractMoney(cost);
      this.buildings.push({ type: buildingType, level: 1 });
      gameManager.logGameAction(`${player.name} x√¢y ${buildingType} t·∫°i ${this.name}.`);
      gameManager.emitPlayerUpdate(player);
      gameManager.emitSquareUpdate(this);
      return true;
    } else {
      gameManager.emitGameLogToPlayer(playerId, `Kh√¥ng ƒë·ªß V√†ng ƒë·ªÉ x√¢y ${buildingType}.`);
      return false;
    }
  }

  upgradeBuilding(buildingType, playerId, gameManager) {
    const { BUILDING_TYPES } = require('./enums');
    const player = gameManager.getPlayerById(playerId);

    // ƒê·ªãnh nghƒ©a n√¢ng c·∫•p theo docs
    const upgradeMap = {
      [BUILDING_TYPES.DEN]: BUILDING_TYPES.CHUA,
      [BUILDING_TYPES.THANH]: BUILDING_TYPES.KHU_QUAN_SU,
      [BUILDING_TYPES.NHA]: BUILDING_TYPES.LANG
    };

    const upgradedType = upgradeMap[buildingType];
    if (!upgradedType) {
      gameManager.emitGameLogToPlayer(playerId, `Kh√¥ng th·ªÉ n√¢ng c·∫•p ${buildingType}.`);
      return false;
    }

    // X√≥a 3 c√¥ng tr√¨nh c≈© v√† th√™m 1 c√¥ng tr√¨nh n√¢ng c·∫•p
    const buildingsToRemove = this.buildings.filter(b => b.type === buildingType).slice(0, 3);
    buildingsToRemove.forEach(building => {
      const index = this.buildings.indexOf(building);
      this.buildings.splice(index, 1);
    });

    this.buildings.push({ type: upgradedType, level: 1, isUpgraded: true });

    // ƒê√°nh d·∫•u √¥ n√†y kh√¥ng th·ªÉ b·ªã mua l·∫°i (theo docs)
    this.cannotBeAcquired = true;

    gameManager.logGameAction(`${player.name} ƒë√£ n√¢ng c·∫•p 3 ${buildingType} th√†nh ${upgradedType} t·∫°i ${this.name}. √î n√†y kh√¥ng th·ªÉ b·ªã mua l·∫°i!`);
    gameManager.emitPlayerUpdate(player);
    gameManager.emitSquareUpdate(this);
    return true;
  }

  // H√†m n√†y s·∫Ω ƒë∆∞·ª£c g·ªçi b·ªüi GameManager khi ng∆∞·ªùi ch∆°i ƒë√°p xu·ªëng √¥
  performLandingAction(player, gameManager) {
    gameManager.logGameAction(`${player.name} ƒë√°p xu·ªëng √¥ ${this.name}.`);

    switch (this.type) {
      case SQUARE_TYPES.PROPERTY_LAND:
        if (this.isOwned()) {
          if (this.ownerId !== player.id && !this.isMortgaged) {
            const rent = this.calculateCurrentRent(player, gameManager);
            if (rent > 0) {
              // Ki·ªÉm tra xem c√≥ th·ªÉ mua l·∫°i ho·∫∑c th√°ch ƒë·∫•u kh√¥ng (n·∫øu ch∆∞a n√¢ng c·∫•p)
              if (!this.cannotBeAcquired) {
                gameManager.requestPlayerPayment(player.id, this.ownerId, rent, "Ti·ªÅn thu√™ ƒë·∫•t", {
                  allowPurchase: true,
                  purchasePrice: this.purchasePrice * 1.5, // Gi√° mua l·∫°i cao h∆°n
                  allowChallenge: true,
                  squareId: this.id
                });
              } else {
                gameManager.requestPlayerPayment(player.id, this.ownerId, rent, "Ti·ªÅn thu√™ ƒë·∫•t");
              }
            }
          } else if (this.ownerId === player.id) {
            // Cho ph√©p x√¢y d·ª±ng n·∫øu l√† ƒë·∫•t c·ªßa m√¨nh
             gameManager.promptPlayerAction(player.id, 'LAND_ACTION_BUILD', { squareId: this.id, costs: this.buildingCost });
          }
        } else if (this.canBePurchased) {
          // ƒê·∫•t tr·ªëng, c√≥ th·ªÉ mua
          gameManager.promptPlayerAction(player.id, 'LAND_ACTION_BUY', { squareId: this.id, price: this.purchasePrice });
        }
        break;
      case SQUARE_TYPES.RIVER:
        if (this.isOwned()) {
          if (this.ownerId !== player.id && !this.isMortgaged) {
            const rent = this.calculateCurrentRent(player, gameManager);
            if (rent > 0) {
              gameManager.requestPlayerPayment(player.id, this.ownerId, rent, "Ph√≠ qua s√¥ng");
            }
          }
        } else if (this.canBePurchased) {
          // Con s√¥ng c√≥ th·ªÉ mua
          gameManager.promptPlayerAction(player.id, 'LAND_ACTION_BUY', { squareId: this.id, price: this.purchasePrice });
        }
        break;
      case SQUARE_TYPES.EVENT_CHANCE:
      case SQUARE_TYPES.EVENT_FATE:
        console.log('üÉè Player landed on event square:', {
          squareName: this.name,
          squareType: this.type,
          playerName: player.name
        });
        const card = gameManager.playerDrawsEventCard(player, this.type);
        if (card) {
          console.log('üÉè Card drawn successfully, applying effect');
          gameManager.applyEventCardEffect(player, card);
        } else {
          console.log('üÉè No card drawn, ending turn');
          gameManager.endPlayerTurnActions();
        }
        break;
      case SQUARE_TYPES.TAX_PAYMENT:
        const taxAmount = this.taxAmount || this.baseRent || 100000; // S·ª≠ d·ª•ng taxAmount t·ª´ squares.json
        gameManager.requestPlayerPayment(player.id, 'bank', taxAmount, "Thu·∫ø thu nh·∫≠p");
        break;
      case SQUARE_TYPES.GO_TO_JAIL:
        gameManager.sendPlayerToJail(player);
        break;
      case SQUARE_TYPES.JAIL:
        if (player.isInJail) {
          gameManager.emitGameLog(`${player.name} ƒëang "thƒÉm t√π".`);
        } else {
          gameManager.emitGameLog(`${player.name} ·ªü √¥ "Giam C·∫ßm" nh∆∞ng kh√¥ng b·ªã b·∫Øt.`);
        }
        break;
      case SQUARE_TYPES.START:
        // Th∆∞·ªùng ti·ªÅn qua START ƒë∆∞·ª£c x·ª≠ l√Ω khi di chuy·ªÉn, kh√¥ng ph·∫£i khi ƒë√°p ch√≠nh x√°c
        gameManager.emitGameLog(`${player.name} ·ªü √¥ L·∫¨P QU·ªêC.`);
        break;
      case SQUARE_TYPES.FREE_PARKING:
        gameManager.emitGameLog(`${player.name} an to√†n t·∫°i ${this.name}.`);
        break;
      case SQUARE_TYPES.SPECIAL_ACTION_HORSE: // Ng·ª±a √î
        gameManager.promptPlayerAction(player.id, 'SPECIAL_ACTION_HORSE_CHOOSE_DESTINATION', { currentSquareId: this.id });
        break;
      case SQUARE_TYPES.SPECIAL_ACTION_FESTIVAL: // L·ªÖ H·ªôi
        const ownedDistricts = player.ownedProperties.map(sqId => gameManager.board.getSquareById(sqId))
                                .filter(sq => sq && sq.historicalPeriod && sq.canBuildHere); // Ch·ªâ c√°c v√πng ƒë·∫•t c√≥ th·ªÉ t·ªï ch·ª©c
        if (ownedDistricts.length > 0) {
            gameManager.promptPlayerAction(player.id, 'SPECIAL_ACTION_FESTIVAL_CHOOSE_DISTRICT', { availableDistricts: ownedDistricts.map(sq=>({id: sq.id, name: sq.name})) });
        } else {
            gameManager.emitGameLog(`${player.name} kh√¥ng c√≥ v√πng ƒë·∫•t n√†o ƒë·ªÉ t·ªï ch·ª©c L·ªÖ H·ªôi.`);
            gameManager.setGamePhase(GAME_PHASES.TURN_ENDING); // Chuy·ªÉn sang k·∫øt th√∫c l∆∞·ª£t n·∫øu kh√¥ng c√≥ h√†nh ƒë·ªông
        }
        break;
      default:
        // Kh√¥ng c√≥ h√†nh ƒë·ªông ƒë·∫∑c bi·ªát, c√≥ th·ªÉ chuy·ªÉn sang k·∫øt th√∫c l∆∞·ª£t
        gameManager.setGamePhase(GAME_PHASES.TURN_ENDING);
    }
  }
  mortgage(player, gameManager) {
    if (this.ownerId !== player.id || this.isMortgaged || this.buildings.length > 0) {
      gameManager.emitGameLogToPlayer(player.id, "Kh√¥ng th·ªÉ c·∫ßm c·ªë √¥ n√†y (ph·∫£i b√°n h·∫øt c√¥ng tr√¨nh tr∆∞·ªõc, ho·∫∑c ƒë√£ c·∫ßm c·ªë).", "error");
      return false;
    }
    const mortgageValue = this.purchasePrice / 2;
    player.addMoney(mortgageValue);
    this.isMortgaged = true;
    gameManager.logGameAction(`${player.name} ƒë√£ c·∫ßm c·ªë ${this.name} v√† nh·∫≠n ${mortgageValue} V√†ng.`);
    gameManager.emitPlayerUpdate(player);
    gameManager.emitSquareUpdate(this);
    return true;
  }

  unmortgage(player, gameManager) {
    if (this.ownerId !== player.id || !this.isMortgaged) {
      gameManager.emitGameLogToPlayer(player.id, "Kh√¥ng th·ªÉ chu·ªôc l·∫°i √¥ n√†y.", "error");
      return false;
    }
    const unmortgageCost = Math.floor((this.purchasePrice / 2) * 1.1); // Gi√° chu·ªôc = gi√° c·∫ßm c·ªë + 10% l√£i
    if (!player.canAfford(unmortgageCost)) {
      gameManager.emitGameLogToPlayer(player.id, `Kh√¥ng ƒë·ªß ${unmortgageCost} V√†ng ƒë·ªÉ chu·ªôc l·∫°i.`, "warning");
      return false;
    }
    player.subtractMoney(unmortgageCost);
    this.isMortgaged = false;
    gameManager.logGameAction(`${player.name} ƒë√£ chu·ªôc l·∫°i ${this.name} v·ªõi gi√° ${unmortgageCost} V√†ng.`);
    gameManager.emitPlayerUpdate(player);
    gameManager.emitSquareUpdate(this);
    return true;
  }

  sellBuilding(player, buildingType, gameManager) {
    if (this.ownerId !== player.id) return false;
    const buildingIndex = this.buildings.findIndex(b => b.type === buildingType);
    if (buildingIndex === -1) {
        gameManager.emitGameLogToPlayer(player.id, `Kh√¥ng c√≥ ${buildingType} ƒë·ªÉ b√°n t·∫°i ${this.name}.`, "warning");
        return false;
    }
    // Gi·∫£ s·ª≠ gi√° b√°n l·∫°i = 1/2 gi√° x√¢y
    const buildingOriginalCost = this.buildingCost[buildingType] || 0;
    const sellValue = buildingOriginalCost / 2;

    this.buildings.splice(buildingIndex, 1);
    player.addMoney(sellValue);
    gameManager.logGameAction(`${player.name} ƒë√£ b√°n m·ªôt ${buildingType} t·∫°i ${this.name} v√† nh·∫≠n ${sellValue} V√†ng.`);
    gameManager.emitPlayerUpdate(player);
    gameManager.emitSquareUpdate(this);
    return true;
  }
}

module.exports = Square;