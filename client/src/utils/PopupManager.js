// client/src/utils/PopupManager.js
import Swal from 'sweetalert2';

class PopupManager {
  constructor() {
    // Configure default SweetAlert2 theme
    this.defaultConfig = {
      customClass: {
        popup: 'ky-su-popup',
        title: 'ky-su-title',
        content: 'ky-su-content',
        confirmButton: 'ky-su-confirm-btn',
        cancelButton: 'ky-su-cancel-btn'
      },
      buttonsStyling: false,
      showClass: {
        popup: 'animate__animated animate__fadeInDown animate__faster'
      },
      hideClass: {
        popup: 'animate__animated animate__fadeOutUp animate__faster'
      }
    };
  }

  // Success popup
  success(title, text = '', options = {}) {
    return Swal.fire({
      ...this.defaultConfig,
      icon: 'success',
      title,
      text,
      confirmButtonText: 'OK',
      timer: options.timer || 3000,
      timerProgressBar: true,
      ...options
    });
  }

  // Error popup
  error(title, text = '', options = {}) {
    return Swal.fire({
      ...this.defaultConfig,
      icon: 'error',
      title,
      text,
      confirmButtonText: 'OK',
      ...options
    });
  }

  // Warning popup
  warning(title, text = '', options = {}) {
    return Swal.fire({
      ...this.defaultConfig,
      icon: 'warning',
      title,
      text,
      confirmButtonText: 'OK',
      ...options
    });
  }

  // Info popup
  info(title, text = '', options = {}) {
    return Swal.fire({
      ...this.defaultConfig,
      icon: 'info',
      title,
      text,
      confirmButtonText: 'OK',
      ...options
    });
  }

  // Confirmation popup
  confirm(title, text = '', options = {}) {
    return Swal.fire({
      ...this.defaultConfig,
      icon: 'question',
      title,
      text,
      showCancelButton: true,
      confirmButtonText: options.confirmText || 'X√°c nh·∫≠n',
      cancelButtonText: options.cancelText || 'H·ªßy',
      ...options
    });
  }

  // Custom popup with HTML content
  custom(options = {}) {
    return Swal.fire({
      ...this.defaultConfig,
      ...options
    });
  }

  // Loading popup
  loading(title = 'ƒêang x·ª≠ l√Ω...', text = '') {
    return Swal.fire({
      ...this.defaultConfig,
      title,
      text,
      allowOutsideClick: false,
      allowEscapeKey: false,
      showConfirmButton: false,
      didOpen: () => {
        Swal.showLoading();
      }
    });
  }

  // Close loading popup
  closeLoading() {
    Swal.close();
  }

  // Toast notification (small popup at corner)
  toast(title, icon = 'success', position = 'top-end') {
    return Swal.fire({
      toast: true,
      position,
      icon,
      title,
      showConfirmButton: false,
      timer: 3000,
      timerProgressBar: true,
      customClass: {
        popup: 'ky-su-toast'
      }
    });
  }

  // Leaderboard popup with formatted content
  leaderboard(leaderboardData) {
    let content = '';
    
    if (leaderboardData.length === 0) {
      content = '<p class="no-data">Ch∆∞a c√≥ d·ªØ li·ªáu b·∫£ng x·∫øp h·∫°ng</p>';
    } else {
      content = `
        <div class="leaderboard-container">
          <table class="leaderboard-table">
            <thead>
              <tr>
                <th>H·∫°ng</th>
                <th>Ng∆∞·ªùi ch∆°i</th>
                <th>S·ªë tr·∫≠n</th>
                <th>Th·∫Øng</th>
                <th>T·ª∑ l·ªá th·∫Øng</th>
              </tr>
            </thead>
            <tbody>
              ${leaderboardData.map((player, index) => `
                <tr>
                  <td class="rank">${index + 1}</td>
                  <td class="player">${player.username}</td>
                  <td>${player.totalGames}</td>
                  <td>${player.totalWins}</td>
                  <td class="win-rate">${player.winRate.toFixed(1)}%</td>
                </tr>
              `).join('')}
            </tbody>
          </table>
        </div>
      `;
    }

    return this.custom({
      title: 'üèÜ B·∫£ng X·∫øp H·∫°ng',
      html: content,
      width: '600px',
      confirmButtonText: 'ƒê√≥ng'
    });
  }

  // Game history popup
  gameHistory(historyData) {
    let content = '';
    
    if (historyData.length === 0) {
      content = '<p class="no-data">Ch∆∞a c√≥ l·ªãch s·ª≠ tr·∫≠n ƒë·∫•u</p>';
    } else {
      content = `
        <div class="history-container">
          ${historyData.map(game => `
            <div class="history-item">
              <div class="game-info">
                <span class="game-date">${new Date(game.createdAt).toLocaleDateString('vi-VN')}</span>
                <span class="game-status ${game.status}">${this.getGameStatusText(game.status)}</span>
              </div>
              <div class="game-details">
                <span>Ng∆∞·ªùi ch∆°i: ${game.players.length}</span>
                ${game.winner ? `<span class="winner">Th·∫Øng: ${game.winner.username}</span>` : ''}
              </div>
            </div>
          `).join('')}
        </div>
      `;
    }

    return this.custom({
      title: 'üìú L·ªãch S·ª≠ Tr·∫≠n ƒê·∫•u',
      html: content,
      width: '500px',
      confirmButtonText: 'ƒê√≥ng'
    });
  }

  getGameStatusText(status) {
    const statusMap = {
      'completed': 'Ho√†n th√†nh',
      'in_progress': 'ƒêang ch∆°i',
      'waiting': 'Ch·ªù ng∆∞·ªùi ch∆°i',
      'cancelled': 'ƒê√£ h·ªßy'
    };
    return statusMap[status] || status;
  }

  // Property purchase confirmation
  propertyPurchase(squareData) {
    return this.confirm(
      `Mua ${squareData.name}?`,
      `Gi√°: ${squareData.price.toLocaleString()} V√†ng`,
      {
        confirmText: 'Mua',
        cancelText: 'Kh√¥ng mua',
        icon: 'question'
      }
    );
  }

  // Building construction confirmation
  buildingConstruction(buildingData) {
    return this.confirm(
      `X√¢y d·ª±ng ${buildingData.type}?`,
      `Gi√°: ${buildingData.cost.toLocaleString()} V√†ng\nThu nh·∫≠p: +${buildingData.income.toLocaleString()} V√†ng/l∆∞·ª£t`,
      {
        confirmText: 'X√¢y d·ª±ng',
        cancelText: 'H·ªßy',
        icon: 'question'
      }
    );
  }

  // Password input popup
  inputPassword(options = {}) {
    return Swal.fire({
      ...this.defaultConfig,
      icon: 'question',
      title: options.title || 'Nh·∫≠p m·∫≠t kh·∫©u',
      text: options.text || '',
      input: 'password',
      inputPlaceholder: options.inputPlaceholder || 'M·∫≠t kh·∫©u...',
      showCancelButton: true,
      confirmButtonText: options.confirmButtonText || 'OK',
      cancelButtonText: options.cancelButtonText || 'H·ªßy',
      inputValidator: (value) => {
        if (!value) {
          return 'Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u!';
        }
      },
      ...options
    });
  }

  // Room settings popup
  roomSettings(currentSettings = {}) {
    return Swal.fire({
      ...this.defaultConfig,
      title: '‚öôÔ∏è C√†i ƒë·∫∑t ph√≤ng',
      html: `
        <div class="room-settings-form">
          <div class="form-group">
            <label for="roomName">T√™n ph√≤ng:</label>
            <input type="text" id="roomName" class="swal2-input" value="${currentSettings.roomName || ''}" placeholder="Nh·∫≠p t√™n ph√≤ng..." maxlength="30">
          </div>

          <div class="form-group">
            <label for="maxPlayers">S·ªë ng∆∞·ªùi ch∆°i t·ªëi ƒëa:</label>
            <select id="maxPlayers" class="swal2-select">
              <option value="2" ${currentSettings.maxPlayers === 2 ? 'selected' : ''}>2 ng∆∞·ªùi</option>
              <option value="3" ${currentSettings.maxPlayers === 3 ? 'selected' : ''}>3 ng∆∞·ªùi</option>
              <option value="4" ${currentSettings.maxPlayers === 4 ? 'selected' : ''}>4 ng∆∞·ªùi</option>
            </select>
          </div>

          <div class="form-group">
            <label class="checkbox-label">
              <input type="checkbox" id="isPrivate" ${currentSettings.isPrivate ? 'checked' : ''}>
              <span class="checkmark"></span>
              Ph√≤ng ri√™ng t∆∞
            </label>
          </div>

          <div class="form-group" id="passwordGroup" style="display: ${currentSettings.isPrivate ? 'block' : 'none'}">
            <label for="password">M·∫≠t kh·∫©u:</label>
            <input type="password" id="password" class="swal2-input" value="${currentSettings.password || ''}" placeholder="Nh·∫≠p m·∫≠t kh·∫©u..." maxlength="20">
          </div>
        </div>
      `,
      showCancelButton: true,
      confirmButtonText: 'C·∫≠p nh·∫≠t',
      cancelButtonText: 'H·ªßy',
      width: '400px',
      didOpen: () => {
        const isPrivateCheckbox = document.getElementById('isPrivate');
        const passwordGroup = document.getElementById('passwordGroup');

        isPrivateCheckbox.addEventListener('change', () => {
          passwordGroup.style.display = isPrivateCheckbox.checked ? 'block' : 'none';
        });
      },
      preConfirm: () => {
        const roomName = document.getElementById('roomName').value.trim();
        const maxPlayers = parseInt(document.getElementById('maxPlayers').value);
        const isPrivate = document.getElementById('isPrivate').checked;
        const password = document.getElementById('password').value.trim();

        if (!roomName) {
          Swal.showValidationMessage('Vui l√≤ng nh·∫≠p t√™n ph√≤ng');
          return false;
        }

        if (roomName.length < 3) {
          Swal.showValidationMessage('T√™n ph√≤ng ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±');
          return false;
        }

        if (isPrivate && !password) {
          Swal.showValidationMessage('Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u cho ph√≤ng ri√™ng t∆∞');
          return false;
        }

        if (isPrivate && password.length < 4) {
          Swal.showValidationMessage('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 4 k√Ω t·ª±');
          return false;
        }

        const result = {
          roomName,
          maxPlayers,
          isPrivate
        };

        // Always include password field for validation
        if (isPrivate) {
          result.password = password;
        } else {
          result.password = '';
        }

        return result;
      }
    });
  }
}

// Export singleton instance
export default new PopupManager();
