import PopupManager from '../utils/PopupManager';

export class GameUI {
  constructor(scene) {
    this.scene = scene;
    this.elements = {};
    this.isVisible = true;
    this.isRoomHost = false;
    this.gameState = null;
    this.isDiceAnimating = false; // Flag to track dice animation state
  }

  create() {
    this.createPlayerPanel();
    this.createGameControls();
    this.createDiceDisplay();
    this.createHostControls();
    this.createChatPanel();
    this.createGameLog();
    this.createActionButtons();
    this.enhanceBoardUI(); // Add visual enhancements to the board
  }
  
  enhanceBoardUI() {
    // Ph∆∞∆°ng th·ª©c n√†y th√™m c√°c hi·ªáu ·ª©ng tr·ª±c quan cho b√†n c·ªù d·ª±a tr√™n thi·∫øt k·∫ø m·∫´u
    const { width, height } = this.scene.cameras.main;
    
    // T·∫°o container cho c√°c trang tr√≠ b√†n c·ªù
    this.elements.boardDecorations = this.scene.add.container(0, 0);
    
    // Th√™m ti√™u ƒë·ªÅ cho b√†n c·ªù s·ª≠ d·ª•ng font ch·ªØ UTM ThuPhap Thien An n·∫øu c√≥
    const boardTitle = this.scene.add.text(width / 2, 30, 'K·ª≤ S·ª¨ L·∫†C H·ªíNG', {
      fontFamily: '"UTM ThuPhap Thien An", Arial, sans-serif', // S·ª≠ d·ª•ng font ƒë·∫∑c bi·ªát ho·∫∑c fallback
      fontSize: '36px',
      fontWeight: 'bold',
      color: '#FFD700', // M√†u v√†ng
      stroke: '#8B4513', // Vi·ªÅn m√†u n√¢u
      strokeThickness: 4,
      shadow: {
        offsetX: 2,
        offsetY: 2,
        color: '#000',
        blur: 5,
        stroke: true,
        fill: true
      }
    });
    boardTitle.setOrigin(0.5);
    this.elements.boardDecorations.add(boardTitle);
    
    // Th√™m hi·ªáu ·ª©ng cho ti√™u ƒë·ªÅ
    this.scene.tweens.add({
      targets: boardTitle,
      y: { from: 25, to: 35 },
      duration: 2000,
      ease: 'Sine.easeInOut',
      yoyo: true,
      repeat: -1
    });
    
    try {
      // L·∫•y k√≠ch th∆∞·ªõc v√† v·ªã tr√≠ c·ªßa b√†n c·ªù t·ª´ scene
      const centerX = this.scene.cameras.main.centerX;
      const centerY = this.scene.cameras.main.centerY;
      const boardWidth = this.scene.board ? this.scene.board.width : 800;
      const boardHeight = this.scene.board ? this.scene.board.height : 800;
      
      // Th√™m hi·ªáu ·ª©ng √°nh s√°ng xung quanh b√†n c·ªù
      const boardGlow = this.scene.add.graphics();
      boardGlow.fillStyle(0xFFD700, 0.2); // M√†u v√†ng nh·∫°t
      boardGlow.fillRect(
        centerX - boardWidth/2 - 15,
        centerY - boardHeight/2 - 15,
        boardWidth + 30,
        boardHeight + 30
      );
      boardGlow.setBlendMode(Phaser.BlendModes.ADD);
      this.elements.boardDecorations.add(boardGlow);
      
      // Th√™m c√°c bi·ªÉu t∆∞·ª£ng trang tr√≠ ·ªü c√°c g√≥c
      const cornerIcons = ['üèØ', 'üèÆ', 'üè∫', 'üìú'];
      const cornerPositions = [
        { x: centerX - boardWidth/2 + 60, y: centerY - boardHeight/2 + 60 }, // G√≥c tr√™n b√™n tr√°i
        { x: centerX + boardWidth/2 - 60, y: centerY - boardHeight/2 + 60 }, // G√≥c tr√™n b√™n ph·∫£i
        { x: centerX + boardWidth/2 - 60, y: centerY + boardHeight/2 - 60 }, // G√≥c d∆∞·ªõi b√™n ph·∫£i
        { x: centerX - boardWidth/2 + 60, y: centerY + boardHeight/2 - 60 }  // G√≥c d∆∞·ªõi b√™n tr√°i
      ];
      
      // Th√™m c√°c bi·ªÉu t∆∞·ª£ng v√†o c√°c g√≥c
      cornerPositions.forEach((pos, index) => {
        const icon = this.scene.add.text(pos.x, pos.y, cornerIcons[index], {
          fontSize: '40px'
        });
        icon.setOrigin(0.5);
        icon.setInteractive({ useHandCursor: true });
        icon.on('pointerover', () => {
          icon.setScale(1.2);
        });
        icon.on('pointerout', () => {
          icon.setScale(1.0);
        });
        this.elements.boardDecorations.add(icon);
      });
      
      // Th√™m trang tr√≠ ·ªü gi·ªØa b√†n c·ªù
      const centerDecoration = this.scene.add.text(centerX, centerY, '‚≠ê', {
        fontSize: '60px',
        color: '#FFD700'
      });
      centerDecoration.setOrigin(0.5);
      centerDecoration.setInteractive({ useHandCursor: true });
      centerDecoration.on('pointerdown', () => {
        // Hi·ªáu ·ª©ng khi click v√†o ng√¥i sao ·ªü gi·ªØa
        this.scene.tweens.add({
          targets: centerDecoration,
          scale: { from: 1.1, to: 0.8 },
          duration: 200,
          yoyo: true,
          onComplete: () => {
            // Hi·ªÉn th·ªã th√¥ng tin tr√≤ ch∆°i ho·∫∑c h∆∞·ªõng d·∫´n
            PopupManager.info('K·ª≥ S·ª≠ L·∫°c H·ªìng', 'Ch√†o m·ª´ng ƒë·∫øn v·ªõi tr√≤ ch∆°i K·ª≥ S·ª≠ L·∫°c H·ªìng!\n\nH√£y di chuy·ªÉn qu√¢n c·ªù v√† chinh ph·ª•c c√°c v√πng ƒë·∫•t ƒë·ªÉ tr·ªü th√†nh ng∆∞·ªùi chi·∫øn th·∫Øng.');
          }
        });
      });
      this.elements.boardDecorations.add(centerDecoration);
      
      // Hi·ªáu ·ª©ng nh·∫•p nh√°y cho ng√¥i sao ·ªü gi·ªØa
      this.scene.tweens.add({
        targets: centerDecoration,
        alpha: { from: 0.7, to: 1 },
        scale: { from: 0.9, to: 1.1 },
        duration: 1500,
        yoyo: true,
        repeat: -1
      });
      
    } catch (error) {
      console.error('Error adding board decorations:', error);
    }
  }

  createPlayerPanel() {
    const { width, height } = this.scene.cameras.main;
    
    // Player info panel
    this.elements.playerPanel = this.scene.add.container(10, 10);
    
    // Background - made smaller
    const panelBg = this.scene.add.rectangle(0, 0, 250, 90, 0x000000, 0.7);
    panelBg.setOrigin(0, 0);
    this.elements.playerPanel.add(panelBg);

    // Player name - smaller font
    this.elements.playerName = this.scene.add.text(8, 8, 'Player Name', {
      fontSize: '14px',
      fontFamily: 'Arial',
      color: '#ffffff',
      fontStyle: 'bold'
    });
    this.elements.playerPanel.add(this.elements.playerName);

    // Money display - smaller font
    this.elements.moneyText = this.scene.add.text(8, 26, 'Money: 2,000,000 V√†ng', {
      fontSize: '12px',
      fontFamily: 'Arial',
      color: '#ffff00'
    });
    this.elements.playerPanel.add(this.elements.moneyText);

    // Properties count - smaller font
    this.elements.propertiesText = this.scene.add.text(8, 42, 'Properties: 0', {
      fontSize: '11px',
      fontFamily: 'Arial',
      color: '#00ff00'
    });
    this.elements.playerPanel.add(this.elements.propertiesText);

    // Historical character card - smaller font
    this.elements.characterText = this.scene.add.text(8, 56, 'Character: None', {
      fontSize: '11px',
      fontFamily: 'Arial',
      color: '#ff9900'
    });
    this.elements.playerPanel.add(this.elements.characterText);

    // Turn indicator - smaller font
    this.elements.turnIndicator = this.scene.add.text(8, 72, '', {
      fontSize: '12px',
      fontFamily: 'Arial',
      color: '#ff0000',
      fontStyle: 'bold'
    });
    this.elements.playerPanel.add(this.elements.turnIndicator);
  }

  createGameControls() {
    const { width, height } = this.scene.cameras.main;

    // Game controls panel
    this.elements.controlsPanel = this.scene.add.container(width - 250, 10);

    // Background
    const controlsBg = this.scene.add.rectangle(0, 0, 240, 140, 0x000000, 0.7);
    controlsBg.setOrigin(0, 0);
    this.elements.controlsPanel.add(controlsBg);

    // Room name display
    this.elements.roomNameText = this.scene.add.text(120, 15, 'Room: Loading...', {
      fontSize: '14px',
      fontFamily: 'Arial',
      color: '#FFD700',
      fontStyle: 'bold'
    });
    this.elements.roomNameText.setOrigin(0.5);
    this.elements.controlsPanel.add(this.elements.roomNameText);

    // Dice roll button
    this.elements.rollDiceBtn = this.scene.add.rectangle(120, 45, 200, 40, 0x4CAF50);
    this.elements.rollDiceBtn.setInteractive();
    this.elements.rollDiceBtn.on('pointerdown', () => this.rollDice());
    this.elements.rollDiceBtn.on('pointerover', () => this.elements.rollDiceBtn.setFillStyle(0x66BB6A));
    this.elements.rollDiceBtn.on('pointerout', () => this.elements.rollDiceBtn.setFillStyle(0x4CAF50));
    this.elements.controlsPanel.add(this.elements.rollDiceBtn);

    this.elements.rollDiceText = this.scene.add.text(120, 45, 'Roll Dice', {
      fontSize: '16px',
      fontFamily: 'Arial',
      color: '#ffffff',
      fontStyle: 'bold'
    });
    this.elements.rollDiceText.setOrigin(0.5);
    this.elements.controlsPanel.add(this.elements.rollDiceText);

    // End turn button
    this.elements.endTurnBtn = this.scene.add.rectangle(120, 75, 200, 30, 0xF44336);
    this.elements.endTurnBtn.setInteractive();
    this.elements.endTurnBtn.on('pointerdown', () => this.endTurn());
    this.elements.endTurnBtn.on('pointerover', () => this.elements.endTurnBtn.setFillStyle(0xE57373));
    this.elements.endTurnBtn.on('pointerout', () => this.elements.endTurnBtn.setFillStyle(0xF44336));
    this.elements.controlsPanel.add(this.elements.endTurnBtn);

    this.elements.endTurnText = this.scene.add.text(120, 75, 'End Turn', {
      fontSize: '14px',
      fontFamily: 'Arial',
      color: '#ffffff'
    });
    this.elements.endTurnText.setOrigin(0.5);
    this.elements.controlsPanel.add(this.elements.endTurnText);

    // Leave room button
    this.elements.leaveRoomBtn = this.scene.add.rectangle(120, 110, 200, 25, 0xFF5722);
    this.elements.leaveRoomBtn.setInteractive();
    this.elements.leaveRoomBtn.on('pointerdown', () => this.leaveRoom());
    this.elements.leaveRoomBtn.on('pointerover', () => this.elements.leaveRoomBtn.setFillStyle(0xFF7043));
    this.elements.leaveRoomBtn.on('pointerout', () => this.elements.leaveRoomBtn.setFillStyle(0xFF5722));
    this.elements.controlsPanel.add(this.elements.leaveRoomBtn);

    this.elements.leaveRoomText = this.scene.add.text(120, 110, 'üö™ R·ªùi ph√≤ng', {
      fontSize: '12px',
      fontFamily: 'Arial',
      color: '#ffffff',
      fontStyle: 'bold'
    });
    this.elements.leaveRoomText.setOrigin(0.5);
    this.elements.controlsPanel.add(this.elements.leaveRoomText);
  }

  createDiceDisplay() {
    const { width, height } = this.scene.cameras.main;

    // Dice display panel (center of screen)
    this.elements.dicePanel = this.scene.add.container(width / 2, height / 2);

    // Background with gradient effect
    const diceBg = this.scene.add.rectangle(0, 0, 280, 140, 0x2C3E50, 0.95);
    diceBg.setStrokeStyle(4, 0xFFD700);
    this.elements.dicePanel.add(diceBg);

    // Add shadow for panel
    const panelShadow = this.scene.add.rectangle(3, 3, 280, 140, 0x000000, 0.4);
    this.elements.dicePanel.add(panelShadow);
    this.elements.dicePanel.sendToBack(panelShadow);

    // Title with better styling
    this.elements.diceTitle = this.scene.add.text(0, -50, 'üé≤ ROLLING DICE', {
      fontSize: '18px',
      fontFamily: 'Arial',
      color: '#FFD700',
      fontStyle: 'bold'
    });
    this.elements.diceTitle.setOrigin(0.5);
    this.elements.dicePanel.add(this.elements.diceTitle);

    // Dice 1 container
    this.elements.dice1Container = this.scene.add.container(-60, -5);
    this.elements.dicePanel.add(this.elements.dice1Container);

    // Dice 1 background - larger and with rounded corners effect
    this.elements.dice1 = this.scene.add.rectangle(0, 0, 55, 55, 0xFFFFFF);
    this.elements.dice1.setStrokeStyle(3, 0x333333);
    this.elements.dice1Container.add(this.elements.dice1);

    // Add shadow effect for dice 1
    const dice1Shadow = this.scene.add.rectangle(2, 2, 55, 55, 0x000000, 0.3);
    this.elements.dice1Container.add(dice1Shadow);
    this.elements.dice1Container.sendToBack(dice1Shadow);

    // Dice 2 container
    this.elements.dice2Container = this.scene.add.container(60, -5);
    this.elements.dicePanel.add(this.elements.dice2Container);

    // Dice 2 background - larger and with rounded corners effect
    this.elements.dice2 = this.scene.add.rectangle(0, 0, 55, 55, 0xFFFFFF);
    this.elements.dice2.setStrokeStyle(3, 0x333333);
    this.elements.dice2Container.add(this.elements.dice2);

    // Add shadow effect for dice 2
    const dice2Shadow = this.scene.add.rectangle(2, 2, 55, 55, 0x000000, 0.3);
    this.elements.dice2Container.add(dice2Shadow);
    this.elements.dice2Container.sendToBack(dice2Shadow);

    // Total display with better styling
    this.elements.diceTotal = this.scene.add.text(0, 50, 'Total: -', {
      fontSize: '16px',
      fontFamily: 'Arial',
      color: '#FFFFFF',
      fontStyle: 'bold'
    });
    this.elements.diceTotal.setOrigin(0.5);
    this.elements.dicePanel.add(this.elements.diceTotal);

    // Add decorative elements
    const leftStar = this.scene.add.text(-100, -10, '‚≠ê', {
      fontSize: '20px'
    });
    leftStar.setOrigin(0.5);
    this.elements.dicePanel.add(leftStar);

    const rightStar = this.scene.add.text(100, -10, '‚≠ê', {
      fontSize: '20px'
    });
    rightStar.setOrigin(0.5);
    this.elements.dicePanel.add(rightStar);

    // Initially hidden
    this.elements.dicePanel.setVisible(false);
  }

  // Create dice dots pattern
  createDiceDots(container, value) {
    // Clear existing dots
    container.list.forEach(child => {
      if (child.getData && child.getData('isDot')) {
        child.destroy();
      }
    });

    const dotSize = 5; // Slightly larger dots
    const dotColor = 0x000000;

    // Standard dice dot patterns (like real dice)
    const dotPatterns = {
      1: [
        [0, 0] // Center dot
      ],
      2: [
        [-12, -12], // Top-left
        [12, 12]    // Bottom-right
      ],
      3: [
        [-12, -12], // Top-left
        [0, 0],     // Center
        [12, 12]    // Bottom-right
      ],
      4: [
        [-12, -12], // Top-left
        [12, -12],  // Top-right
        [-12, 12],  // Bottom-left
        [12, 12]    // Bottom-right
      ],
      5: [
        [-12, -12], // Top-left
        [12, -12],  // Top-right
        [0, 0],     // Center
        [-12, 12],  // Bottom-left
        [12, 12]    // Bottom-right
      ],
      6: [
        [-12, -12], // Top-left
        [12, -12],  // Top-right
        [-12, 0],   // Middle-left
        [12, 0],    // Middle-right
        [-12, 12],  // Bottom-left
        [12, 12]    // Bottom-right
      ]
    };

    const pattern = dotPatterns[value] || dotPatterns[1];
    pattern.forEach(([x, y]) => {
      const dot = this.scene.add.circle(x, y, dotSize, dotColor);
      dot.setData('isDot', true);
      container.add(dot);
    });
  }

  createHostControls() {
    const { width, height } = this.scene.cameras.main;

    // Host controls panel (only visible for room host) - positioned below game controls
    this.elements.hostPanel = this.scene.add.container(width - 250, 160);
    this.elements.hostPanel.setVisible(false); // Hidden by default

    // Panel background
    this.elements.hostPanelBg = this.scene.add.rectangle(0, 0, 240, 140, 0x2C3E50, 0.9);
    this.elements.hostPanelBg.setStrokeStyle(2, 0xFFD700);
    this.elements.hostPanelBg.setOrigin(0, 0);
    this.elements.hostPanel.add(this.elements.hostPanelBg);

    // Title
    this.elements.hostTitle = this.scene.add.text(10, 10, 'üè† Ch·ªß ph√≤ng', {
      fontSize: '14px',
      fontFamily: 'Arial',
      color: '#ffffff',
      fontStyle: 'bold'
    });
    this.elements.hostTitle.setOrigin(0, 0);
    this.elements.hostPanel.add(this.elements.hostTitle);

    // Start Game button
    this.elements.startGameBtn = this.scene.add.rectangle(10, 35, 220, 30, 0x27AE60);
    this.elements.startGameBtn.setOrigin(0, 0);
    this.elements.startGameBtn.setInteractive();
    this.elements.startGameBtn.on('pointerdown', () => this.startGame());
    this.elements.startGameBtn.on('pointerover', () => this.elements.startGameBtn.setFillStyle(0x2ECC71));
    this.elements.startGameBtn.on('pointerout', () => this.elements.startGameBtn.setFillStyle(0x27AE60));
    this.elements.hostPanel.add(this.elements.startGameBtn);

    this.elements.startGameText = this.scene.add.text(120, 50, 'üéÆ B·∫Øt ƒë·∫ßu game', {
      fontSize: '12px',
      fontFamily: 'Arial',
      color: '#ffffff',
      fontStyle: 'bold'
    });
    this.elements.startGameText.setOrigin(0.5);
    this.elements.hostPanel.add(this.elements.startGameText);

    // Room Settings button
    this.elements.roomSettingsBtn = this.scene.add.rectangle(10, 70, 220, 25, 0x3498DB);
    this.elements.roomSettingsBtn.setOrigin(0, 0);
    this.elements.roomSettingsBtn.setInteractive();
    this.elements.roomSettingsBtn.on('pointerdown', () => this.showRoomSettings());
    this.elements.roomSettingsBtn.on('pointerover', () => this.elements.roomSettingsBtn.setFillStyle(0x5DADE2));
    this.elements.roomSettingsBtn.on('pointerout', () => this.elements.roomSettingsBtn.setFillStyle(0x3498DB));
    this.elements.hostPanel.add(this.elements.roomSettingsBtn);

    this.elements.roomSettingsText = this.scene.add.text(120, 82, '‚öôÔ∏è C√†i ƒë·∫∑t ph√≤ng', {
      fontSize: '11px',
      fontFamily: 'Arial',
      color: '#ffffff',
      fontStyle: 'bold'
    });
    this.elements.roomSettingsText.setOrigin(0.5);
    this.elements.hostPanel.add(this.elements.roomSettingsText);

    // Close Room button
    this.elements.closeRoomBtn = this.scene.add.rectangle(10, 100, 220, 25, 0xE74C3C);
    this.elements.closeRoomBtn.setOrigin(0, 0);
    this.elements.closeRoomBtn.setInteractive();
    this.elements.closeRoomBtn.on('pointerdown', () => this.closeRoom());
    this.elements.closeRoomBtn.on('pointerover', () => this.elements.closeRoomBtn.setFillStyle(0xC0392B));
    this.elements.closeRoomBtn.on('pointerout', () => this.elements.closeRoomBtn.setFillStyle(0xE74C3C));
    this.elements.hostPanel.add(this.elements.closeRoomBtn);

    this.elements.closeRoomText = this.scene.add.text(120, 112, 'üö´ ƒê√≥ng ph√≤ng', {
      fontSize: '11px',
      fontFamily: 'Arial',
      color: '#ffffff',
      fontStyle: 'bold'
    });
    this.elements.closeRoomText.setOrigin(0.5);
    this.elements.hostPanel.add(this.elements.closeRoomText);
  }

  createChatPanel() {
    const { width, height } = this.scene.cameras.main;

    // Chat button (collapsed by default) - positioned at bottom left
    this.elements.chatButton = this.scene.add.container(10, height - 50);

    // Chat button background
    const chatButtonBg = this.scene.add.rectangle(0, 0, 100, 40, 0x2C3E50, 0.9);
    chatButtonBg.setOrigin(0, 0);
    chatButtonBg.setInteractive();
    chatButtonBg.on('pointerdown', () => this.toggleChat());
    chatButtonBg.on('pointerover', () => chatButtonBg.setFillStyle(0x34495E));
    chatButtonBg.on('pointerout', () => chatButtonBg.setFillStyle(0x2C3E50));
    this.elements.chatButton.add(chatButtonBg);

    // Chat button text
    this.elements.chatButtonText = this.scene.add.text(50, 20, 'üí¨ Chat', {
      fontSize: '14px',
      fontFamily: 'Arial',
      color: '#ffffff',
      fontStyle: 'bold'
    });
    this.elements.chatButtonText.setOrigin(0.5);
    this.elements.chatButton.add(this.elements.chatButtonText);

    // Chat panel (hidden by default) - positioned at bottom left, above button
    this.elements.chatPanel = this.scene.add.container(10, height - 290);
    this.elements.chatPanel.setVisible(false);

    // Background
    const chatBg = this.scene.add.rectangle(0, 0, 350, 200, 0x000000, 0.9);
    chatBg.setOrigin(0, 0);
    this.elements.chatPanel.add(chatBg);

    // Chat title with close button
    const chatTitle = this.scene.add.text(10, 5, 'Chat', {
      fontSize: '16px',
      fontFamily: 'Arial',
      color: '#ffffff',
      fontStyle: 'bold'
    });
    this.elements.chatPanel.add(chatTitle);

    // Close button
    const closeBtn = this.scene.add.text(330, 5, '‚úï', {
      fontSize: '16px',
      fontFamily: 'Arial',
      color: '#ff6b6b',
      fontStyle: 'bold'
    });
    closeBtn.setOrigin(0.5, 0);
    closeBtn.setInteractive();
    closeBtn.on('pointerdown', () => this.toggleChat());
    closeBtn.on('pointerover', () => closeBtn.setColor('#ff5252'));
    closeBtn.on('pointerout', () => closeBtn.setColor('#ff6b6b'));
    this.elements.chatPanel.add(closeBtn);

    // Chat messages area
    this.elements.chatMessages = this.scene.add.text(10, 25, '', {
      fontSize: '12px',
      fontFamily: 'Arial',
      color: '#ffffff',
      wordWrap: { width: 330 }
    });
    this.elements.chatPanel.add(this.elements.chatMessages);

    // Chat input (will be handled by DOM)
    this.createChatInput();

    this.isChatOpen = false;
  }

  createGameLog() {
    const { width, height } = this.scene.cameras.main;

    // Game log panel (positioned at bottom right corner)
    this.elements.logPanel = this.scene.add.container(width - 320, height - 220);

    // Background
    const logBg = this.scene.add.rectangle(0, 0, 300, 200, 0x000000, 0.8);
    logBg.setStrokeStyle(2, 0x34495E);
    logBg.setOrigin(0, 0);
    this.elements.logPanel.add(logBg);
    
    // Log title
    const logTitle = this.scene.add.text(10, 5, 'Game Log', {
      fontSize: '16px',
      fontFamily: 'Arial',
      color: '#ffffff',
      fontStyle: 'bold'
    });
    this.elements.logPanel.add(logTitle);
    
    // Log messages
    this.elements.logMessages = this.scene.add.text(10, 25, '', {
      fontSize: '10px',
      fontFamily: 'Arial',
      color: '#cccccc',
      wordWrap: { width: 280 },
      lineSpacing: 2
    });
    this.elements.logPanel.add(this.elements.logMessages);
  }

  createActionButtons() {
    // Action buttons container (will be shown when needed)
    this.elements.actionPanel = this.scene.add.container(0, 0);
    this.elements.actionPanel.setVisible(false);
  }

  toggleChat() {
    this.isChatOpen = !this.isChatOpen;
    this.elements.chatPanel.setVisible(this.isChatOpen);

    if (this.chatInput) {
      this.chatInput.style.display = this.isChatOpen ? 'block' : 'none';
    }

    // Update button text
    this.elements.chatButtonText.setText(this.isChatOpen ? 'üí¨ ƒê√≥ng' : 'üí¨ Chat');
  }

  createChatInput() {
    // Create DOM input for chat
    const chatInput = document.createElement('input');
    chatInput.type = 'text';
    chatInput.placeholder = 'Nh·∫≠p tin nh·∫Øn...';
    chatInput.style.position = 'absolute';
    chatInput.style.bottom = '110px';
    chatInput.style.left = '20px';
    chatInput.style.width = '330px';
    chatInput.style.height = '30px';
    chatInput.style.backgroundColor = '#2c3e50';
    chatInput.style.color = '#ffffff';
    chatInput.style.border = '1px solid #34495e';
    chatInput.style.borderRadius = '4px';
    chatInput.style.padding = '5px 10px';
    chatInput.style.fontSize = '12px';
    chatInput.style.outline = 'none';
    chatInput.style.display = 'none'; // Hidden by default

    chatInput.addEventListener('keypress', (e) => {
      if (e.key === 'Enter' && chatInput.value.trim()) {
        this.sendChatMessage(chatInput.value.trim());
        chatInput.value = '';
      }
    });

    document.body.appendChild(chatInput);
    this.chatInput = chatInput;
  }

  // Update methods
  updatePlayerInfo(playerData) {
    if (this.elements.playerName) {
      this.elements.playerName.setText(playerData.name || 'Unknown Player');
    }
    if (this.elements.moneyText) {
      this.elements.moneyText.setText(`Money: ${(playerData.money || 0).toLocaleString()} V√†ng`);
    }
    if (this.elements.propertiesText) {
      this.elements.propertiesText.setText(`Properties: ${(playerData.ownedProperties || []).length}`);
    }
    if (this.elements.characterText && playerData.historicalCharacterCardInHand) {
      this.elements.characterText.setText(`Character: ${playerData.historicalCharacterCardInHand.title}`);
    }
  }

  updateTurnIndicator(isMyTurn, currentPlayerName) {
    if (this.elements.turnIndicator) {
      if (isMyTurn) {
        this.elements.turnIndicator.setText('YOUR TURN');
        this.elements.turnIndicator.setColor('#00ff00');
      } else {
        this.elements.turnIndicator.setText(`${currentPlayerName}'s turn`);
        this.elements.turnIndicator.setColor('#ff9900');
      }
    }

    // Update button states based on turn
    this.updateButtonStates(isMyTurn);
  }

  updateButtonStates(isMyTurn) {
    const gameStarted = this.gameState?.status === 'playing';
    const canRollDice = isMyTurn && gameStarted &&
                       (this.gameState?.gamePhase === 'WAITING_FOR_ROLL' ||
                        this.gameState?.gamePhase === 'PLAYER_TURN_START');

    console.log('üéÆ Button States Update:', {
      isMyTurn,
      gameStarted,
      gamePhase: this.gameState?.gamePhase,
      gameStatus: this.gameState?.status,
      canRollDice
    });

    // Update roll dice button
    if (this.elements.rollDiceBtn) {
      if (canRollDice) {
        this.elements.rollDiceBtn.setFillStyle(0x4CAF50);
        this.elements.rollDiceBtn.setInteractive();
        this.elements.rollDiceText.setColor('#ffffff');
        console.log('‚úÖ Roll dice button ENABLED');
      } else {
        this.elements.rollDiceBtn.setFillStyle(0x7F8C8D);
        this.elements.rollDiceBtn.disableInteractive();
        this.elements.rollDiceText.setColor('#BDC3C7');
        console.log('‚ùå Roll dice button DISABLED');
      }
    }

    // Update end turn button
    if (this.elements.endTurnBtn) {
      const canEndTurn = isMyTurn && gameStarted &&
                        (this.gameState?.gamePhase === 'TURN_ENDING' ||
                         this.gameState?.gamePhase === 'PLAYER_ACTION');

      if (canEndTurn) {
        this.elements.endTurnBtn.setFillStyle(0xF44336);
        this.elements.endTurnBtn.setInteractive();
        this.elements.endTurnText.setColor('#ffffff');
      } else {
        this.elements.endTurnBtn.setFillStyle(0x7F8C8D);
        this.elements.endTurnBtn.disableInteractive();
        this.elements.endTurnText.setColor('#BDC3C7');
      }
    }
  }

  updateGameLog(messages) {
    if (this.elements.logMessages) {
      const lastMessages = messages.slice(-10); // Show last 10 messages
      this.elements.logMessages.setText(lastMessages.join('\n'));
    }
  }

  updateDiceDisplay(diceValues, total, isDouble = false) {
    if (this.elements.dice1Container && this.elements.dice2Container && this.elements.diceTotal) {
      // Show dice panel
      this.elements.dicePanel.setVisible(true);

      // Create dice dots for each die
      this.createDiceDots(this.elements.dice1Container, diceValues[0]);
      this.createDiceDots(this.elements.dice2Container, diceValues[1]);

      // Update total with double indicator
      const totalText = `Total: ${total}${isDouble ? ' (DOUBLE!)' : ''}`;
      this.elements.diceTotal.setText(totalText);
      this.elements.diceTotal.setColor(isDouble ? '#FFD700' : '#FFFFFF');

      // Set dice animation flag
      this.isDiceAnimating = true;

      // Add realistic rolling animation
      // First phase: Fast spinning with random rotations
      this.scene.tweens.add({
        targets: this.elements.dice1Container,
        rotation: Math.PI * 6 + Math.random() * Math.PI, // Random final rotation
        scaleX: 1.3,
        scaleY: 1.3,
        duration: 1200,
        ease: 'Power2.easeOut'
      });

      this.scene.tweens.add({
        targets: this.elements.dice2Container,
        rotation: Math.PI * 5 + Math.random() * Math.PI, // Different rotation for each die
        scaleX: 1.3,
        scaleY: 1.3,
        duration: 1200,
        ease: 'Power2.easeOut'
      });

      // Add bouncing effect
      this.scene.tweens.add({
        targets: [this.elements.dice1Container, this.elements.dice2Container],
        y: -15,
        duration: 600,
        ease: 'Power2.easeOut',
        yoyo: true,
        onComplete: () => {
          // Second phase: Settle down
          this.scene.tweens.add({
            targets: [this.elements.dice1Container, this.elements.dice2Container],
            scaleX: 1,
            scaleY: 1,
            duration: 400,
            ease: 'Bounce.easeOut',
            onComplete: () => {
              // Animation completed, allow popups to show
              this.isDiceAnimating = false;
              console.log('üé≤ Dice animation completed');

              // Check if there's a pending action to show
              if (this.scene.pendingAction) {
                console.log('üéØ Showing pending action after dice animation');
                // Add longer delay to let user see the final dice result
                this.scene.time.delayedCall(2000, () => {
                  this.scene.showPendingAction();
                });
              }
            }
          });
        }
      });

      // Add glow effect for double - made longer
      if (isDouble) {
        this.scene.tweens.add({
          targets: this.elements.dicePanel,
          alpha: 0.7,
          duration: 500, // Increased from 300ms to 500ms
          yoyo: true,
          repeat: 3, // Increased from 2 to 3 repeats
          ease: 'Power2'
        });
      }

      // Hide after 6 seconds - increased from 4 seconds
      this.scene.time.delayedCall(6000, () => {
        if (this.elements.dicePanel) {
          this.elements.dicePanel.setVisible(false);
        }
      });
    }
  }

  updateRoomName(roomName) {
    if (this.elements.roomNameText) {
      this.elements.roomNameText.setText(`Room: ${roomName || 'Unknown'}`);
    }
  }

  addChatMessage(username, message) {
    const currentText = this.elements.chatMessages.text;
    const newMessage = `${username}: ${message}`;
    const messages = currentText ? currentText.split('\n') : [];
    messages.push(newMessage);
    
    // Keep only last 8 messages
    if (messages.length > 8) {
      messages.shift();
    }
    
    this.elements.chatMessages.setText(messages.join('\n'));
  }

  // Action methods
  testSocket() {
    console.log('üß™ Test socket button clicked!');
    console.log('üß™ Socket service:', this.scene.socketService);
    console.log('üß™ Socket connected:', this.scene.socketService?.isConnected);
    console.log('üß™ Socket ID:', this.scene.socketService?.socket?.id);
    console.log('üß™ My Player ID:', this.scene.myPlayerId);
    console.log('üß™ Room ID:', this.scene.roomId);
    console.log('üß™ Game state:', this.gameState);

    if (this.scene.socketService && this.scene.socketService.isConnected) {
      console.log('üß™ Emitting test event...');
      this.scene.socketService.socket.emit('test', { message: 'Hello from client!' });
    } else {
      console.log('üß™ Socket not connected!');
    }
  }

  rollDice() {
    console.log('üé≤ Roll dice button clicked!');
    console.log('üé≤ Socket service available:', !!this.scene.socketService);
    console.log('üé≤ Game state:', this.gameState);
    if (this.scene.socketService) {
      console.log('üé≤ Calling socketService.rollDice()');
      this.scene.socketService.rollDice();
    }
  }

  testSocket() {
    console.log('üß™ Testing socket connection...');
    console.log('üß™ Socket connected:', this.scene.socketService.socket?.connected);
    console.log('üß™ Socket ID:', this.scene.socketService.socket?.id);
    console.log('üß™ My Player ID:', this.scene.myPlayerId);
    console.log('üß™ Room ID:', this.scene.roomId);
    console.log('üß™ Game State:', this.gameState);
    console.log('üß™ Is Room Host:', this.isRoomHost);

    // Test socket emit
    this.scene.socketService.socket?.emit('test', { message: 'Hello from client!' });
  }

  endTurn() {
    if (this.scene.socketService) {
      this.scene.socketService.endTurn();
    }
  }

  sendChatMessage(message) {
    if (this.scene.socketService) {
      this.scene.socketService.sendChatMessage(message);
    }
  }

  async leaveRoom() {
    console.log('GameUI: leaveRoom() called');
    console.log('GameUI: scene.roomId =', this.scene.roomId);
    console.log('GameUI: scene.apiService =', this.scene.apiService);
    console.log('GameUI: scene.socketService =', this.scene.socketService);

    const roomName = this.gameState?.roomName || this.gameState?.roomId || 'ph√≤ng ch∆°i n√†y';
    const result = await PopupManager.confirm(
      'R·ªùi ph√≤ng',
      `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën r·ªùi kh·ªèi ph√≤ng "${roomName}" kh√¥ng?`,
      {
        confirmText: 'R·ªùi ph√≤ng',
        cancelText: '·ªû l·∫°i'
      }
    );

    if (result.isConfirmed) {
      try {
        console.log('GameUI: User confirmed leave room');
        PopupManager.loading('ƒêang r·ªùi ph√≤ng...');

        // Leave via API first
        if (this.scene.roomId) {
          console.log('GameUI: Calling API leaveRoom with roomId:', this.scene.roomId);
          await this.scene.apiService.leaveRoom(this.scene.roomId);
          console.log('GameUI: API leaveRoom completed');
        } else {
          console.warn('GameUI: No roomId available for API leave call');
        }

        // Then leave via socket
        if (this.scene.socketService) {
          console.log('GameUI: Calling socket leaveRoom');
          this.scene.socketService.leaveRoom();
          console.log('GameUI: Socket leaveRoom called');
        } else {
          console.warn('GameUI: No socketService available');
        }

        PopupManager.closeLoading();
        PopupManager.success('Th√†nh c√¥ng!', 'ƒê√£ r·ªùi kh·ªèi ph√≤ng', { timer: 1500 });

        // Return to main menu with refresh flag
        setTimeout(() => {
          try {
            console.log('GameUI: Returning to MainMenuScene');
            if (this.scene.scene && this.scene.scene.start) {
              this.scene.scene.start('MainMenuScene', { shouldRefresh: true });
            }
          } catch (error) {
            console.error('Error returning to main menu:', error);
          }
        }, 1500);

      } catch (error) {
        console.error('Error leaving room:', error);
        PopupManager.closeLoading();
        PopupManager.error('L·ªói', `Kh√¥ng th·ªÉ r·ªùi ph√≤ng: ${error.message || error}`);
      }
    }
  }

  // Host control methods
  async startGame() {
    console.log('üéÆ Start game debug:');
    console.log('- isRoomHost:', this.isRoomHost);
    console.log('- gameState:', this.gameState);
    console.log('- players:', this.gameState?.players);
    console.log('- playerCount:', this.gameState?.players?.length);
    console.log('- game status:', this.gameState?.status);

    if (!this.isRoomHost) {
      PopupManager.error('L·ªói', 'Ch·ªâ ch·ªß ph√≤ng m·ªõi c√≥ th·ªÉ b·∫Øt ƒë·∫ßu game');
      return;
    }

    // Check if we have enough players
    const playerCount = this.gameState?.players?.length || 0;
    if (playerCount < 2) {
      PopupManager.error('Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu', 'C·∫ßn √≠t nh·∫•t 2 ng∆∞·ªùi ch∆°i ƒë·ªÉ b·∫Øt ƒë·∫ßu game');
      return;
    }

    const result = await PopupManager.confirm(
      'B·∫Øt ƒë·∫ßu game',
      `B·∫Øt ƒë·∫ßu game v·ªõi ${playerCount} ng∆∞·ªùi ch∆°i?`,
      {
        confirmText: 'B·∫Øt ƒë·∫ßu',
        cancelText: 'H·ªßy'
      }
    );

    if (result.isConfirmed) {
      try {
        PopupManager.loading('ƒêang b·∫Øt ƒë·∫ßu game...');
        this.scene.socketService.startGame();
      } catch (error) {
        console.error('Error starting game:', error);
        PopupManager.closeLoading();
        PopupManager.error('L·ªói', 'Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu game');
      }
    }
  }

  async showRoomSettings() {
    if (!this.isRoomHost) {
      PopupManager.error('L·ªói', 'Ch·ªâ ch·ªß ph√≤ng m·ªõi c√≥ th·ªÉ thay ƒë·ªïi c√†i ƒë·∫∑t');
      return;
    }

    const currentSettings = this.gameState?.settings || {};

    const result = await PopupManager.roomSettings({
      roomName: this.gameState?.roomName || '',
      maxPlayers: currentSettings.maxPlayers || 4,
      isPrivate: currentSettings.isPrivate || false,
      password: currentSettings.password || ''
    });

    if (result.isConfirmed && result.value) {
      try {
        PopupManager.loading('ƒêang c·∫≠p nh·∫≠t c√†i ƒë·∫∑t...');

        // Import ApiService
        const ApiService = (await import('../services/ApiService.js')).default;

        // Call HTTP API instead of socket
        const response = await ApiService.updateRoom(this.gameState.roomId, result.value);

        PopupManager.closeLoading();
        PopupManager.success('Th√†nh c√¥ng', 'C√†i ƒë·∫∑t ph√≤ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!', { timer: 3000 });

        // Update local game state immediately (socket event will also update)
        if (response.game) {
          console.log('üîÑ Updating local game state after room settings update:');
          console.log('- Old gameState:', this.gameState);
          console.log('- Response game:', response.game);

          this.gameState.roomName = response.game.roomName;
          this.gameState.settings = response.game.settings;
          this.updateRoomName(response.game.roomName);

          console.log('- New gameState:', this.gameState);
          console.log('- isRoomHost after update:', this.isRoomHost);

          // Force update host controls
          this.updateHostControls();
        }

      } catch (error) {
        console.error('Error updating room settings:', error);
        PopupManager.closeLoading();
        PopupManager.error('L·ªói', error.response?.data?.error || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t c√†i ƒë·∫∑t ph√≤ng');
      }
    }
  }

  async closeRoom() {
    if (!this.isRoomHost) {
      PopupManager.error('L·ªói', 'Ch·ªâ ch·ªß ph√≤ng m·ªõi c√≥ th·ªÉ ƒë√≥ng ph√≤ng');
      return;
    }

    const result = await PopupManager.confirm(
      'ƒê√≥ng ph√≤ng',
      'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒë√≥ng ph√≤ng? T·∫•t c·∫£ ng∆∞·ªùi ch∆°i s·∫Ω b·ªã ƒë∆∞a ra kh·ªèi ph√≤ng.',
      {
        confirmText: 'ƒê√≥ng ph√≤ng',
        cancelText: 'H·ªßy'
      }
    );

    if (result.isConfirmed) {
      try {
        PopupManager.loading('ƒêang ƒë√≥ng ph√≤ng...');

        // Import ApiService
        const ApiService = (await import('../services/ApiService.js')).default;

        // Call HTTP API to close room
        await ApiService.closeRoom(this.gameState.roomId);

        PopupManager.closeLoading();
        PopupManager.success('Th√†nh c√¥ng', 'Ph√≤ng ƒë√£ ƒë∆∞·ª£c ƒë√≥ng!', { timer: 2000 });

        // Return to main menu after a short delay
        setTimeout(() => {
          this.scene.scene.start('MainMenuScene', { shouldRefresh: true });
        }, 2000);

      } catch (error) {
        console.error('Error closing room:', error);
        PopupManager.closeLoading();
        PopupManager.error('L·ªói', error.response?.data?.error || 'Kh√¥ng th·ªÉ ƒë√≥ng ph√≤ng');
      }
    }
  }

  // Update UI based on game state and host status
  updateGameState(gameState) {
    console.log('üé® GameUI received game state:', gameState);
    this.gameState = gameState;
    this.updateHostControls();
    this.updateGameStatus();

    // Update button states based on current player
    if (gameState && gameState.players && this.scene.myPlayerId) {
      const currentPlayer = gameState.players.find(p => p.id === gameState.currentPlayerId);
      const isMyTurn = currentPlayer && currentPlayer.id === this.scene.myPlayerId;
      this.updateButtonStates(isMyTurn);
    }
  }

  updateGameStatus() {
    if (this.elements.gameStatusText && this.gameState) {
      const playerCount = this.gameState.players?.length || 0;
      const maxPlayers = this.gameState.settings?.maxPlayers || 4;
      const status = this.gameState.status || 'waiting';

      let statusText = '';
      switch (status) {
        case 'waiting':
          statusText = `ƒêang ch·ªù ng∆∞·ªùi ch∆°i... (${playerCount}/${maxPlayers})`;
          break;
        case 'playing':
          statusText = 'ƒêang ch∆°i';
          break;
        case 'finished':
          statusText = 'ƒê√£ k·∫øt th√∫c';
          break;
        default:
          statusText = 'Kh√¥ng x√°c ƒë·ªãnh';
      }

      this.elements.gameStatusText.setText(`Status: ${statusText}`);
    }
  }

  setRoomHost(isHost) {
    console.log('üè† Setting room host:', isHost);
    this.isRoomHost = isHost;
    this.updateHostControls();
  }

  updateHostControls() {
    console.log('üè† Updating host controls, isRoomHost:', this.isRoomHost, 'hostPanel exists:', !!this.elements.hostPanel);
    if (this.elements.hostPanel) {
      this.elements.hostPanel.setVisible(this.isRoomHost);
      console.log('üè† Host panel visibility set to:', this.isRoomHost);
    }

    // Update start game button state
    if (this.elements.startGameBtn && this.isRoomHost) {
      const playerCount = this.gameState?.players?.length || 0;
      const canStart = playerCount >= 2 && this.gameState?.status === 'waiting';

      if (canStart) {
        this.elements.startGameBtn.setFillStyle(0x27AE60);
        this.elements.startGameText.setColor('#ffffff');
      } else {
        this.elements.startGameBtn.setFillStyle(0x7F8C8D);
        this.elements.startGameText.setColor('#BDC3C7');
      }
    }
  }

  addGameLogMessage(message) {
    if (this.elements.logMessages) {
      const currentText = this.elements.logMessages.text;
      const messages = currentText ? currentText.split('\n') : [];
      messages.push(message);

      // Keep only last 10 messages
      if (messages.length > 10) {
        messages.shift();
      }

      this.elements.logMessages.setText(messages.join('\n'));
    }
  }

  // Show action dialogs
  async showPropertyPurchaseDialog(squareData) {
    const result = await PopupManager.propertyPurchase(squareData);

    if (result.isConfirmed && this.scene.socketService) {
      this.scene.socketService.buyProperty(squareData.squareId);
    } else if (this.scene.socketService) {
      this.scene.socketService.skipAction();
    }
  }

  async showBuildingDialog(squareData) {
    const buildingOptions = Object.entries(squareData.costs);

    let optionsHtml = '<div style="text-align: left;">';
    buildingOptions.forEach(([type, cost], index) => {
      optionsHtml += `
        <label style="display: block; margin: 10px 0; color: #ffd700;">
          <input type="radio" name="buildingType" value="${type}" style="margin-right: 10px;">
          ${type} - ${cost.toLocaleString()} V√†ng
        </label>
      `;
    });
    optionsHtml += '</div>';

    const result = await PopupManager.custom({
      title: 'üèóÔ∏è X√¢y D·ª±ng C√¥ng Tr√¨nh',
      html: optionsHtml,
      showCancelButton: true,
      confirmButtonText: 'X√¢y d·ª±ng',
      cancelButtonText: 'H·ªßy',
      preConfirm: () => {
        const selected = document.querySelector('input[name="buildingType"]:checked');
        if (!selected) {
          PopupManager.error('L·ªói', 'Vui l√≤ng ch·ªçn lo·∫°i c√¥ng tr√¨nh');
          return false;
        }
        return selected.value;
      }
    });

    if (result.isConfirmed && this.scene.socketService) {
      this.scene.socketService.buildBuilding(squareData.squareId, result.value);
    }
  }

  async showPaymentOptionsDialog(data) {
    const buttons = [
      { key: 'PAY_RENT', text: 'Tr·∫£ ti·ªÅn thu√™', color: '#f44336' },
    ];

    if (data.allowPurchase) {
      buttons.push({ key: 'PURCHASE_PROPERTY', text: 'Mua b·∫•t ƒë·ªông s·∫£n', color: '#4CAF50' });
    }

    if (data.allowChallenge) {
      buttons.push({ key: 'CHALLENGE_OWNER', text: 'Th√°ch ƒë·∫•u ch·ªß s·ªü h·ªØu', color: '#FF9800' });
    }

    let optionsHtml = `
      <div style="text-align: center; margin-bottom: 20px;">
        <h3 style="color: #ffd700;">S·ªë ti·ªÅn: ${data.amount.toLocaleString()} V√†ng</h3>
      </div>
      <div style="text-align: left;">
    `;

    buttons.forEach((btn, idx) => {
      optionsHtml += `
        <label style="display: block; margin: 15px 0; color: ${btn.color}; font-weight: bold;">
          <input type="radio" name="paymentAction" value="${btn.key}" style="margin-right: 10px;">
          ${btn.text}
        </label>
      `;
    });

    optionsHtml += '</div>';

    const result = await PopupManager.custom({
      title: 'üí∞ L·ª±a Ch·ªçn Thanh To√°n',
      html: optionsHtml,
      showCancelButton: false,
      confirmButtonText: 'X√°c nh·∫≠n',
      allowOutsideClick: false,
      preConfirm: () => {
        const selected = document.querySelector('input[name="paymentAction"]:checked');
        if (!selected) {
          PopupManager.error('L·ªói', 'Vui l√≤ng ch·ªçn m·ªôt h√†nh ƒë·ªông');
          return false;
        }
        return selected.value;
      }
    });

    if (result.isConfirmed && this.scene.socketService) {
      this.scene.socketService.sendPaymentDecision(result.value, data);
    }
  }

  async showJailOptionsDialog(data) {
    const buttons = [];

    if (data.canPayFine) {
      buttons.push({ key: 'PAY_FINE', text: 'üí∞ N·ªôp ph·∫°t (50,000 V√†ng)', color: '#f44336' });
    }

    if (data.canUseCard) {
      buttons.push({ key: 'USE_CARD', text: 'üé´ D√πng th·∫ª mi·ªÖn ph√≠', color: '#4CAF50' });
    }

    buttons.push({ key: 'ROLL_DOUBLES', text: 'üé≤ Tung x√∫c x·∫Øc (th·ª≠ ra t√π)', color: '#FF9800' });
    buttons.push({ key: 'SKIP_TURN', text: '‚è≠Ô∏è B·ªè l∆∞·ª£t', color: '#9E9E9E' });

    let optionsHtml = `
      <div style="text-align: center; margin-bottom: 20px;">
        <h3 style="color: #ffd700;">üèõÔ∏è B·∫°n ƒëang ·ªü trong t√π</h3>
        <p style="color: #ffffff;">C√≤n ${data.turnsLeft} l∆∞·ª£t th·ª≠</p>
      </div>
      <div style="text-align: left;">
    `;

    buttons.forEach((btn) => {
      optionsHtml += `
        <label style="display: block; margin: 15px 0; color: ${btn.color}; font-weight: bold; cursor: pointer;">
          <input type="radio" name="jailAction" value="${btn.key}" style="margin-right: 10px;">
          ${btn.text}
        </label>
      `;
    });

    optionsHtml += '</div>';

    const result = await PopupManager.custom({
      title: 'üèõÔ∏è T√πy ch·ªçn trong t√π',
      html: optionsHtml,
      showCancelButton: false,
      confirmButtonText: 'X√°c nh·∫≠n',
      allowOutsideClick: false,
      preConfirm: () => {
        const selected = document.querySelector('input[name="jailAction"]:checked');
        if (!selected) {
          PopupManager.error('L·ªói', 'Vui l√≤ng ch·ªçn m·ªôt h√†nh ƒë·ªông');
          return false;
        }
        return selected.value;
      }
    });

    if (result.isConfirmed && this.scene.socketService) {
      this.scene.socketService.handleJailDecision(result.value);
    }
  }

  async showHorseDestinationDialog(data) {
    const availableSquares = data.availableSquares || [];

    let optionsHtml = `
      <div style="text-align: center; margin-bottom: 20px;">
        <h3 style="color: #ffd700;">üêé Ch·ªçn ƒëi·ªÉm ƒë·∫øn</h3>
        <p style="color: #ffffff;">B·∫°n c√≥ th·ªÉ di chuy·ªÉn ƒë·∫øn m·ªôt trong c√°c √¥ sau:</p>
      </div>
      <div style="text-align: left; max-height: 300px; overflow-y: auto;">
    `;

    availableSquares.forEach((square) => {
      optionsHtml += `
        <label style="display: block; margin: 10px 0; color: #ffd700; cursor: pointer; padding: 5px; border: 1px solid #444; border-radius: 4px;">
          <input type="radio" name="destination" value="${square.id}" style="margin-right: 10px;">
          <strong>√î ${square.position}:</strong> ${square.name}
        </label>
      `;
    });

    optionsHtml += '</div>';

    const result = await PopupManager.custom({
      title: 'üêé Ch·ªçn ƒëi·ªÉm ƒë·∫øn',
      html: optionsHtml,
      showCancelButton: true,
      confirmButtonText: 'Di chuy·ªÉn',
      cancelButtonText: 'H·ªßy',
      preConfirm: () => {
        const selected = document.querySelector('input[name="destination"]:checked');
        if (!selected) {
          PopupManager.error('L·ªói', 'Vui l√≤ng ch·ªçn ƒëi·ªÉm ƒë·∫øn');
          return false;
        }
        return selected.value;
      }
    });

    if (result.isConfirmed && this.scene.socketService) {
      this.scene.socketService.handleHorseDestination(result.value);
    }
  }

  setVisible(visible) {
    this.isVisible = visible;
    Object.values(this.elements).forEach(element => {
      if (element && element.setVisible) {
        element.setVisible(visible);
      }
    });

    if (this.chatInput) {
      this.chatInput.style.display = visible ? 'block' : 'none';
    }
  }

  destroy() {
    if (this.chatInput) {
      document.body.removeChild(this.chatInput);
    }
    
    Object.values(this.elements).forEach(element => {
      if (element && element.destroy) {
        element.destroy();
      }
    });
  }
}

export default GameUI;
